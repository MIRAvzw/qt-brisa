#!/bin/bash

#================================================
#
#   Please full fill the four variables below or 
#   the configure script will not work properly.
#
#================================================

NECESSITAS_ROOT=/opt/necessitas                 #(e.g. /opt/necessitas)
NDK_ROOT=/arquivos/Android/android-ndk-r5b     #(e.g. /foo/bar/android-ndk-r5b)
ANDROID_NDK_ROOT=/arquivos/Android/android-ndk-r5b      #(e.g. /foo/bar/android-ndk-r5b)
ANDROID_NDK_TOOLCHAIN_PREFIX=arm-linux-androideabi                  #(e.g. arm-linux-androideabi)
ANDROID_NDK_TOOLCHAIN_VERSION=4.4.3          #(e.g. 4.4.3)


#===============================================
#    Original BRisa Configure Script
#===============================================


# defaults
QMAKE_BIN="$NECESSITAS_ROOT/Android/4.7.60/bin/qmake"
WHICH=which
BRISA_MODULES="core upnp utils"
BRISA_INSTALL_PREFIX="/usr"

# detect platform
if uname -a | grep -iq Darwin; then
    BRISA_MAC=1
    DEFAULT_LIBS="/Library/Frameworks"
    QMAKE_PARAMS="-spec macx-g++"
    NO_XRANDR=1
else
    BRISA_MAC=0
    DEFAULT_LIBS="PREFIX/lib"
    QMAKE_PARAMS=""
fi


#Disabled because the last override null the previous assigns
BRISA_SOURCE_TREE=`dirname $0`
BRISA_SOURCE_TREE=`(cd "$BRISA_SOURCE_TREE"; /bin/pwd)`
# working directories
BRISA_BUILD_TREE=`/bin/pwd`
#[ ! -d $BRISA_BUILD_TREE/examples ] && mkdir $BRISA_BUILD_TREE/examples
[ ! -d $BRISA_BUILD_TREE/tests ] && mkdir $BRISA_BUILD_TREE/tests

# output files
CONFIG_LOG=$BRISA_BUILD_TREE/config.log
QMAKE_CACHE=$BRISA_BUILD_TREE/.qmake.cache
BRISA_VARS=$BRISA_BUILD_TREE/features/brisavars.prf
[ -f $CONFIG_LOG ] && mv $CONFIG_LOG $CONFIG_LOG.bak
[ -f $QMAKE_CACHE ] && mv $QMAKE_CACHE $QMAKE_CACHE.bak
[ -f $BRISA_VARS ] && mv $BRISA_VARS $BRISA_VARS.bak

# colors
C_RED='\e[1;31m'
C_BLUE='\e[1;34m'
C_GREEN='\e[1;32m'
C_CYAN='\e[1;36m'
C_NONE='\e[0m'

# defaults
echo "CONFIG += silent" > $QMAKE_CACHE
echo "BRISA_MODULES = $BRISA_MODULES" >> $QMAKE_CACHE
echo "BRISA_MODULES = $BRISA_MODULES" > $BRISA_VARS

# parse configure options
while (( $# > 0 )); do
    if [ $1 == "-qmake-bin" ]; then
        QMAKE_BIN=$2; shift
    elif [ $1 == "-L" ]; then
        echo "LIBS += -L$2" >> $QMAKE_CACHE;shift
    elif [ $1 == "-l" ]; then
        echo "LIBS += -l$2" >> $QMAKE_CACHE;shift
    elif [ $1 == "-I" ]; then
        echo "INCLUDEPATH += $2" >> $QMAKE_CACHE;shift
    elif [ $1 == "-bootstrap" ]; then
        echo "CONFIG += bootstrap" >> $QMAKE_CACHE; shift
    elif [ $1 == "-nomake" ]; then
        echo "BRISA_MODULES -= $2" >> $QMAKE_CACHE
        echo "BRISA_MODULES -= $2" >> $BRISA_VARS; shift
    elif [ $1 == "-prefix" ]; then
        BRISA_INSTALL_PREFIX=$2; shift
    elif [ $1 == "-libdir" ]; then
        BRISA_INSTALL_LIBS=$2; shift
    elif [ $1 == "-docdir" ]; then
        BRISA_INSTALL_DOCS=$2; shift
    elif [ $1 == "-headerdir" ]; then
        BRISA_INSTALL_HEADERS=$2; shift
    elif [ $1 == "-bindir" ]; then
        BRISA_INSTALL_BINS=$2; shift
    elif [ $1 == "-featuredir" ]; then
        BRISA_INSTALL_FEATURES=$2; shift
    elif [ $1 == "-static" ]; then
        echo "CONFIG += static staticlib" >> $QMAKE_CACHE
        echo "DEFINES += BRISA_STATIC" >> $BRISA_VARS
    elif [ $1 == "-debug" ]; then
        echo "CONFIG += debug" >> $QMAKE_CACHE
        echo "BRISA_INSTALL_TYPE = debug" >> $BRISA_VARS
    elif [ $1 == "-release" ]; then
        echo "CONFIG += release" >> $QMAKE_CACHE
        echo "BRISA_INSTALL_TYPE = release" >> $BRISA_VARS
    elif [ $1 == "-verbose" ]; then
        echo "CONFIG -= silent" >> $QMAKE_CACHE
    elif [ $1 == "-qws" ]; then
        echo "CONFIG += qws" >> $QMAKE_CACHE
    elif [ $1 == "-coverage" ]; then
        echo "CONFIG += coverage" >> $QMAKE_CACHE
    elif [ $1 == "-universal" ]; then
        echo "CONFIG += x86 ppc" >> $QMAKE_CACHE
    elif [ $1 == "-arch" ]; then
        echo "CONFIG += $2" >> $QMAKE_CACHE
        shift
    elif [ $1 == "-sdk" ]; then
        echo "QMAKE_MAC_SDK=$2" >> $QMAKE_CACHE; shift
    elif [ $1 == "-h" ] || [ $1 == "-help" ] || [ $1 == "--help" ]; then
        echo "Usage: configure [-prefix <dir>] [-libdir <dir>] [-docdir <dir>]"
        echo "       [-bindir <dir>] [-headerdir <dir>] [-featuredir <dir> ]"
        echo "       [-qmake-bin <path>] [-static] [-debug] [-release]"
        echo "       [-nomake <module>]"
        if [[ "$BRISA_MAC" == "0" ]]; then
            echo -n "       [-no-xrandr] [-qws]"
        else
            echo -n "       [-universal] [-arch <arch>] [-sdk <path>]"
        fi
        echo " [-verbose] [-coverage]"
        echo
        echo "Installation options:"
        echo
        echo "-prefix <dir> ....... This will install everything relative to <dir>"
        echo "                      default: /usr/local/BRisa"
        echo "-libdir <dir> ....... Libraries will be installed to <dir>"
        echo "                      default: $DEFAULT_LIBS"
        echo "-docdir <dir> ....... Documentation will be installed to <dir>"
        echo "                      default: PREFIX/doc"
        echo "-bindir <dir> ....... Executables will be installed to <dir>"
        echo "                      default: PREFIX/bin"
        echo "-headerdir <dir> .... Include files will be installed to <dir>"
        echo "                      default: PREFIX/include"
        echo "-featuredir <dir> ... Feature files will be installed to <dir>"
        echo "                      default: QMAKE_MKSPECS/features"
        echo "-qmake-bin <path> ... Specifies the path to the qmake executable"
        echo "                      default: search the system path"
        echo "-L <path> ........... Specifies the a additional library search path"
        echo "-I <path> ........... Specifies the a additional include search path"
        echo "-l <path> ........... Add a custom library"
        echo "-static ............. Build BRisa as a static library"
        echo "-debug .............. Build BRisa with debugging symbols"
        echo "-release ............ Build BRisa without debugging support"
        if [[ "$BRISA_MAC" != "1" ]]; then
            echo "-qws ................ Build for Qt/Embedded"
        fi
        echo "-nomake <module> .... Do not compile the specified module"
        echo "                      options: $BRISA_MODULES"
        echo "-verbose ............ Show full compiler output"
        echo "-coverage ........... Collect coverage information"
        if [[ "$BRISA_MAC" == "1" ]]; then
            echo "-universal .......... Equivalent to -arch ppc -arch x86"
            echo "-arch <arch> ........ Include <arch> in universal binary"
            echo "-sdk <path> ......... Use a different Mac SDK"
        fi

        [ -f $CONFIG_LOG.bak ] && mv $CONFIG_LOG.bak $CONFIG_LOG
        [ -f $QMAKE_CACHE.bak ] && mv $QMAKE_CACHE.bak $QMAKE_CACHE
        [ -f $BRISA_VARS.bak ] && mv $BRISA_VARS.bak $BRISA_VARS
        exit
    else
        echo "Unrecognized configure option: $1"
        [ -f $CONFIG_LOG.bak ] && mv $CONFIG_LOG.bak $CONFIG_LOG
        [ -f $QMAKE_CACHE.bak ] && mv $QMAKE_CACHE.bak $QMAKE_CACHE
        [ -f $BRISA_VARS.bak ] && mv $BRISA_VARS.bak $BRISA_VARS
        exit
    fi
    shift
done

# detect qmake
if ! $WHICH $QMAKE_BIN >>$CONFIG_LOG 2>&1; then
    echo >&2 "You don't seem to have 'qmake' in your PATH."
    echo >&2 "Cannot proceed."
    exit 1
fi

# default directories
if [[ "$BRISA_INSTALL_PREFIX" == "" ]]; then
    BRISA_INSTALL_PREFIX="/usr/local/brisa"
fi
if [[ "$BRISA_INSTALL_LIBS" == "" ]]; then
    if [[ "$BRISA_MAC" == "1" ]]; then
        BRISA_INSTALL_LIBS="/Library/Frameworks"
    else
        BRISA_INSTALL_LIBS="$BRISA_INSTALL_PREFIX/lib"
    fi
fi
if [[ "$BRISA_INSTALL_DOCS" == "" ]]; then
    BRISA_INSTALL_DOCS="$BRISA_INSTALL_PREFIX/doc"
fi
if [[ "$BRISA_INSTALL_HEADERS" == "" ]]; then
    BRISA_INSTALL_HEADERS="$BRISA_INSTALL_PREFIX/include/BRisa"
fi
if [[ "$BRISA_INSTALL_BINS" == "" ]]; then
    BRISA_INSTALL_BINS="$BRISA_INSTALL_PREFIX/bin"
fi
if [[ "$BRISA_INSTALL_FEATURES" == "" ]]; then
    BRISA_INSTALL_FEATURES=`$QMAKE_BIN -query QMAKE_MKSPECS`
    BRISA_INSTALL_FEATURES="$BRISA_INSTALL_FEATURES/features"
fi

# output variables
echo "BRISA_INSTALL_PREFIX = $BRISA_INSTALL_PREFIX" >> $QMAKE_CACHE
echo "BRISA_INSTALL_PREFIX = $BRISA_INSTALL_PREFIX" >> $BRISA_VARS
echo "BRISA_INSTALL_LIBS = $BRISA_INSTALL_LIBS" >> $QMAKE_CACHE
echo "BRISA_INSTALL_LIBS = $BRISA_INSTALL_LIBS" >> $BRISA_VARS
echo "BRISA_INSTALL_BINS = $BRISA_INSTALL_BINS" >> $QMAKE_CACHE
echo "BRISA_INSTALL_BINS = $BRISA_INSTALL_BINS" >> $BRISA_VARS
echo "BRISA_INSTALL_HEADERS = $BRISA_INSTALL_HEADERS" >> $QMAKE_CACHE
echo "BRISA_INSTALL_HEADERS = $BRISA_INSTALL_HEADERS" >> $BRISA_VARS
echo "BRISA_INSTALL_FEATURES = $BRISA_INSTALL_FEATURES" >> $QMAKE_CACHE
echo "BRISA_INSTALL_FEATURES = $BRISA_INSTALL_FEATURES" >> $BRISA_VARS
echo "BRISA_INSTALL_DOCS = $BRISA_INSTALL_DOCS" >> $QMAKE_CACHE
echo "BRISA_INSTALL_DOCS = $BRISA_INSTALL_DOCS" >> $BRISA_VARS
echo "BRISA_SOURCE_TREE = $BRISA_SOURCE_TREE" >> $QMAKE_CACHE
echo "BRISA_BUILD_TREE = $BRISA_BUILD_TREE" >> $QMAKE_CACHE

# detect make
echo>$CONFIG_LOG
if [ -z "$MAKE" ]; then
    MAKE=
    for mk in gmake make; do
        if "$WHICH" $mk 2>&1| grep -qv "no "; then
            MAKE=`$WHICH $mk`
            break
        fi
    done
    if [ -z "$MAKE" ]; then
        echo >&2 "You don't seem to have 'make' or 'gmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
    fi
fi

# detect dependencies
configtest()
{
    echo -en "Checking for $1 "
    echo -e  " \n\n $1\n" >>$CONFIG_LOG
    mkdir -p "$BRISA_BUILD_TREE/config.tests/$1"
    cd "$BRISA_BUILD_TREE/config.tests/$1"
    NDK_ROOT=$NDK_ROOT ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT ANDROID_NDK_TOOLCHAIN_PREFIX=$ANDROID_NDK_TOOLCHAIN_PREFIX $QMAKE_BIN $QMAKE_PARAMS "$BRISA_SOURCE_TREE/config.tests/$1/$1.pro" >>$CONFIG_LOG
    echo -n "."
    $MAKE clean >>$CONFIG_LOG 2>&1
    [ -f ./$1 ] && rm ./$1
    echo -n "."
    $MAKE >>$CONFIG_LOG 2>&1 >>$CONFIG_LOG 2>&1
    if [ -x $1 ] ; then
        echo -e >&2 "  [${C_GREEN}success${C_NONE}] "
        echo "DEFINES+=HAVE_$2">>$QMAKE_CACHE
    else
        echo -e >&2 "  [${C_RED}failure${C_NONE}] "
    fi
}

echo >&2 "Installing QtSoap 2.7_1..."
cd deps/qtsoap-2.7_1-opensource
./configure &> qtsoap_build.log
make &> qtsoap_build.log
cd ../..

echo >&2 "Testing for optional external libraries."
echo >&2 "If tests fail, some features will not be available."

configtest qt4 QT

# run qmake
echo "Autodetection finished. Running qmake."
cd  $BRISA_BUILD_TREE
NDK_ROOT=$NDK_ROOT ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT ANDROID_NDK_TOOLCHAIN_PREFIX=$ANDROID_NDK_TOOLCHAIN_PREFIX $QMAKE_BIN $QMAKE_PARAMS -spec android-g++ "$BRISA_SOURCE_TREE/brisa-android.pro" -recursive >>$CONFIG_LOG
echo -e >&2 "${C_CYAN}Configure finished. Run $MAKE now.${C_NONE}\n"
